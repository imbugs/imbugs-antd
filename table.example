import { connect } from "bigfish/sdk";
import map from 'lodash/map'
import React, { PureComponent } from "bigfish/react";
import { Button, Form, Icon, Input, Table, Radio, Card, Row, Col } from "antd";
import { IndexKind } from "typescript";
import FooterToolbar from "@/component/FooterToolbar"
import DynamicTableForm from "@/component/DynamicTableForm"
import styles from "./Tagging.less"
import classNames from 'bigfish/util/classnames';

const { Meta } = Card;
@connect(({ task, dataset }) => ({
  taskList: task.list,
  labelList: dataset.labelList,
}))
export default class Tagging extends PureComponent {
  constructor(props) {
    super(props)
    this.labelRef = React.createRef();
    this.state = {
      dataSetType: null,
      dataSource: [],
      disabled: false,
      disabledSubmit: true,
      url: null,
      isShowLabelList: true,
    };
  }

  componentWillMount() {
    const {
      params: { dataSetType }
    } = this.props;

    if (dataSetType == "CLASSIFY" || dataSetType == "DETECT_RECT") {
      this.setState({ disabled: true, dataSetType: dataSetType, isShowLabelList: true })
    } else if (dataSetType == "OCR") {
      this.setState({ disabled: true, dataSetType: dataSetType, isShowLabelList: false })
    } else {
      this.setState({ dataSetType: null, isShowLabelList: false })
    }
    // lable 列表
    this.listLabel();
  }

  // 获取人工标注连接
  async getArtificial() {
    const {
      dispatch,
      params: { projectId, dataSetId }
    } = this.props;

    const data = await dispatch({
      type: "dataset/labelByArtificial",
      payload: { projectId, dataSetId }
    });
    if (!!data.resultObj) {
      const targetUrl = encodeURIComponent(data.resultObj || '')
      this.props.history.push(`/project/${projectId}/dataset/${dataSetId}/labelByArtificial?targetUrl=${targetUrl}`);
    }
  };

  // lable 列表
  async listLabel() {
    const {
      dispatch,
      params: { projectId, dataSetId }
    } = this.props;

    const data = await dispatch({
      type: "dataset/listLabel",
      payload: { projectId, dataSetId }
    });

    this.setState({
      dataSource: data.list || []
    })
  };

  // 更新lable 信息
  async updateLabel(labelInfos) {
    let labelTypeEnum = this.state.dataSetType;
    const {
      dispatch,
      params: { projectId, dataSetId }
    } = this.props;

    const data = await dispatch({
      type: "dataset/updateLabel",
      payload: { projectId, dataSetId, labelInfos, labelTypeEnum }
    });
    if (data.success) {
      this.getArtificial()
    } else {
      this.listLabel()
    }

  };

  columnsInfo = this.props.columnsInfo || [{
    title: '名称',
    key: 'label',
    width: '30%'
  }, {
    title: '描述',
    key: 'des',

  }];

  async doUpdate() {
    let labelInfos = await this.state.dataSource.slice();
    this.updateLabel(labelInfos);
  };

  onChangeValues = (values) => {
    let labelSet = new Set();
    for (let i in values) {
      let label = values[i].label;
      if (label) {
        if (labelSet.has(label)) {
          this.setState({ disabledSubmit: true });
          return { errorMsg: `label信息重复: ${label}` }
        }
        
        labelSet.add(label);
      }
    }

    this.setState({ disabledSubmit: false, dataSource: values });
  };

  handleDataSetTypeChange(value) {
    // 更新 dataSetType
    this.setState({
      dataSetType: value.target.value,
      isShowLabelList: value.target.value != "OCR"
    }, () => {
      this.labelRef.current && this.labelRef.current.scrollIntoView && this.labelRef.current.scrollIntoView({});
    });
  }

  labelTypeCard = [{
    dataSetType: 'CLASSIFY',
    title: '分类 (Image Classification)',
    desc: '模型会将图像分组到特定的类别，例如Cat/Dog/Others，常见场景：菜品识别、手势识别',
    img: 'http://xnn-cloud.cn-hangzhou.oss.inc.com/nanfeng/xnn_cloud/classify.png'
  }, {
    dataSetType: 'DETECT_RECT',
    title: '检测 (Object Detection)',
    desc: '模型会用矩形框定(多个)目标对象，例如Bird/Dog，常见场景：行人检测、Logo检测',
    img: 'http://xnn-cloud.cn-hangzhou.oss.inc.com/nanfeng/xnn_cloud/detection.png'
  }, {
    dataSetType: 'OCR',
    title: 'OCR',
    desc: '',
    img: 'https://gw-office.objects.com/basement_prod/a4a6426e-e38c-467a-96b0-c705e524f88d.png'
  }];

  render() {
    const { dataSetType } = this.state;
    const dsLen = this.state.dataSource && this.state.dataSource.length || 0;
    return (
      <div>
        <Card style={{ marginBottom: 20 }}>
          <h1 style={{ fontSize: 20 }}>选择标注类型</h1>
          <Radio.Group
            defaultValue={dataSetType}
            buttonStyle="solid"
            onChange={::this.handleDataSetTypeChange}
            disabled={this.state.disabled}
            style={{ width: "100%" }}
          >
            <Row type="flex" justify="space-between" align="top" gutter={32}>
              {map(this.labelTypeCard, item => <Col key={item.dataSetType} span={8}>
                <Radio value={item.dataSetType}
                       className={classNames(styles.labelCard, { [styles.selected]: dataSetType === item.dataSetType })}
                >
                  <span className={styles.title}>{item.title}</span>
                  <div>
                    <p>{item.desc}</p>
                    <img alt={item.title} src={item.img} style={{ width: "100%" }}/>
                  </div>
                </Radio>
              </Col>)}
            </Row>
          </Radio.Group>
        </Card>

        {(this.state.isShowLabelList && dataSetType !== 'OCR' && <Card>
          <h1 style={{ fontSize: 20 }} ref={this.labelRef}>添加类别信息</h1>
          <DynamicTableForm
            key={this.state.dataSetType}
            columnsInfo={this.columnsInfo}
            tableInfo={{ btnLabel: '添加类别' }}
            dataSource={this.props.labelList}
            onChange={this.onChangeValues}
            validator={{
              label: {
                type: "string",
                require: true,
                pattern: /^[a-zA-Z_0-9]{1,}$/,
                message: "label必须是英文字母或数字"
              }
            }}
            onRender={(dataSource) => {
              if (!dataSource || dataSource.length == 0) {
                return;
              }
              if (this.state.dataSetType == 'CLASSIFY') {
                // 添加other分类且排序
                if (!dataSource.find(item => item.label == 'other')) {
                  // classify下没有other时添加一个
                  dataSource.push({ label: 'other', des: 'other' });
                }
                // 将other排到最前面
                dataSource.sort((a, b) => {
                  return a.label == 'other' ? -1 : b.label == 'other' ? 1 : 0;
                });
              }
              let onlyOne = true;
              dataSource.forEach((item) => {
                item.disabled = onlyOne && this.state.dataSetType == 'CLASSIFY' && item.label == 'other';
                if (item.disabled) {
                  // 第二个other不再锁定
                  onlyOne = false;
                }
              });
            }}/>
        </Card>)}

        <div style={{ marginTop: 20 }}></div>
        <FooterToolbar>
          <Button
            type="primary"
            onClick={::this.doUpdate}
            disabled={this.state.disabledSubmit || !((dataSetType === 'CLASSIFY' && dsLen > 1) || (dataSetType === 'DETECT_RECT' && dsLen > 0) || (dataSetType === 'OCR'))}
            style={{ float: 'right', marginTop: 13 }}
          >提交
          </Button>
        </FooterToolbar>
      </div>
    )
  }
}
